{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Using pandas for NMR data","text":""},{"location":"#loading-data","title":"Loading data","text":"<pre><code>from nmr_to_pandas import nmr_to_pandas\n# load a pseudo 3D dataset. `pseudo_dim=0` sets the pseudo dimension assuming\n# your data has shape (Z,Y,X) where Z is the pseudo dimension\ndata = nmr_to_pandas(\"test_pipe.ft2\", pseudo_dim=0)\n# your data object now has the attribute `df`\ndata.df.head()\n</code></pre> <p>You now have your NMR data in the form of a pandas dataframe where <code>Z</code> is the plane number and <code>Y</code> and <code>X</code> are points. The <code>intensity</code> column contains the intensity for each point and for convenience the X and Y ppm values are also provided (<code>X_PPM</code> and <code>Y_PPM</code>, respectively).</p> <pre><code>     Z    Y    X     intensity       Y_PPM      X_PPM\n0  0.0  0.0  0.0 -24273.875000  130.538386  10.498205\n1  0.0  0.0  1.0 -33351.800781  130.538386  10.490872\n2  0.0  0.0  2.0  -9466.987305  130.538386  10.483539\n3  0.0  0.0  3.0  -1997.709473  130.538386  10.476206\n4  0.0  0.0  4.0  10106.075195  130.538386  10.468873\n</code></pre> <p>To slice out data you can use the <code>pandas.Dataframe.query</code> method.</p> <pre><code>data.df.query(\"Z==1 &amp; Y_PPM &lt; 120 and X_PPM &lt; 9\")\n</code></pre> <pre><code>          Z      Y      X     intensity       Y_PPM     X_PPM\n201679  1.0  113.0  205.0  32269.908203  119.945665  8.994906\n201680  1.0  113.0  206.0  73720.929688  119.945665  8.987572\n201681  1.0  113.0  207.0 -35410.578125  119.945665  8.980239\n201682  1.0  113.0  208.0    715.999634  119.945665  8.972906\n201683  1.0  113.0  209.0  37729.289062  119.945665  8.965573\n</code></pre>"},{"location":"#plotting","title":"Plotting","text":"<p>To create a matplotlib contour plot of the data:</p> <pre><code>kwargs=dict(colors=\"red\", negative_contours=dict(colors=\"orange\"))\n# create figure\nfig = plt.figure()\nax = fig.add_subplot(111)\n# contour plot of first plane (Z==0) \nax = data.plot_contour(ax, query=f\"Z==0\", kwargs=kwargs, show_cs=True, invert_axes=True)\n</code></pre> <p></p> <p>To zoom on a specific region:</p> <pre><code>kwargs=dict(colors=\"tab:blue\", negative_contours=dict(colors=\"orange\"))\nquery = \"Z==1 &amp; X_PPM &gt; 7.24 &amp; X_PPM &lt; 7.28 &amp; Y_PPM &gt; 124.8 &amp; Y_PPM &lt; 125.3\"\nfig = plt.figure()\nax = fig.add_subplot(111)\nax = data.plot_contour(ax, query=query, kwargs=kwargs, threshold=1e7, show_cs=True, invert_axes=True)\nplt.grid()\n</code></pre> <p></p> <p>Here is an example of how you might overlay some spectra for comparison (I'm just shifting and overlaying the same spectrum for illustrative purposes):</p> <pre><code>colors = plt.cm.get_cmap(\"Set1\")\ncolors = iter([colors(i) for i in range(20)])\nfig = plt.figure()\nax = fig.add_subplot(111)\nfor i in range(3):\n    data.name = f\" Example {i+3}\"\n    kwargs=dict(colors=[next(colors)], negative_contours=dict(colors=\"red\"))\n    ax = data.plot_contour(ax, query=f\"Z==0 &amp; X_PPM &gt; 7 &amp; X_PPM &lt; 9.5 &amp; Y_PPM &gt; 110 &amp; Y_PPM &lt; 125\", kwargs=kwargs, show_cs=True)\n    data.df[\"Y_PPM\"] = data.df.Y_PPM + 1.0\n    data.df[\"X_PPM\"] = data.df.X_PPM + 0.1\nax.invert_yaxis()\nax.invert_xaxis()\n</code></pre> <p></p>"},{"location":"#customizing-plots","title":"Customizing plots","text":""},{"location":"#colors","title":"Colors","text":"<p>Any matplotlib colormap can be used in the following way by providing its name as a string:</p> <pre><code>kwargs=dict(cmap=\"viridis\", negative_contours=dict(colors=\"red\"))\n</code></pre> <p>Note</p> <p>If <code>colors</code> is provided then this takes precedence over any <code>cmap</code> definition. e.g. if <code>kwargs=dict(cmap=\"viridis\", colors=\"red\")</code> then contours will be drawn <code>red</code> and <code>viridis</code> will be ignored. </p>"},{"location":"#legends","title":"Legends","text":"<p>If the <code>name</code> attribute of your <code>nmrData</code> object is populated with a string then this will be used to create a legend for your contour plot.</p> <pre><code>data = nmr_to_pandas(\"test_pipe.ft2\", pseudo_dim=0)\ndata.name = \"Example 1\"\n</code></pre> <p>If <code>show_cs=True</code> then the value of the contour start (cs) or <code>threshold</code> value is shown in the legend.</p> <pre><code>data.plot_contour(ax, query=\"Z==0\", kwargs=kwargs, threshold=1e7, show_cs=True, invert_axes=True)\n</code></pre> <p>Note</p> <p>Legends are only available for contour plots using <code>colors</code> and not <code>cmaps</code>. </p>"},{"location":"install/","title":"How to install","text":"<p>Create a virtual environment:</p> <pre><code>python -m venv venv\n</code></pre> <p>Activate it (assuming <code>bash</code>):</p> <pre><code>source venv/bin/activate\n</code></pre> <p>Change directory into the top level of the repository:</p> pippoetry <pre><code>pip install .\n</code></pre> <pre><code>poetry install\n</code></pre>"}]}